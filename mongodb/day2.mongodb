// Fun with indexes

populatePhones = function(area, start, stop) {
    for(var i = start; i < stop; i++) {
        var country = 1 + ((Math.random() * 8) << 0) // seems to round
        var num = (country * 1e10) + (area * 1e7) + i;
        var fullNumber = "+" + country + " " + area + "-" + i;

        db.phones.insert({
            _id: num,
            components: {
                country: country,
                area: area,
                prefix: (i * 1e-4) << 0,
                number: i
            },
            display: fullNumber
        });
        print("Inserted number " + fullNumber);
    }
    print("Done!");
}

populatePhones(800, 5550000, 5560000)

db.phones.find().limit(2)

db.getCollectionNames().forEach(
    function (collection) {
        print("Indexes for the " + collection + " collection:");
        printjson(db[collection].getIndexes());
    }
);

db.phones.find(
    {display: "+3 800-5550001"}
).explain("executionStats").executionStats

// add b-tree index to display number
db.phones.ensureIndex(
    { display: 1},
    { unique: true, dropDups: true}
)

db.setProfilingLevel(2)

db.phones.find({display: "+3 800-5550001"})

db.system.profile.find()
db.system.profile.find()[0].execStats  // how to array

db.phones.ensureIndex(
    {"components.area": 1},
    {background: 1}
)

db.phones.getIndexes()


// Fun with aggregations

db.phones.countDocuments({"components.number": {$gt : 5550050}})

db.phones.distinct(
    "components.number",
    {"components.number": { $lt: 5550005}}
)

// agg can combine where, groupby, order by ops
// ...load cities data via python

use("7dbs")

db.cities.aggregate([
    {
        $match: {
            "timezone": {
                $eq: "Europe/London"
            }
        }
    },
    {
        $group: {
            _id: "averagePopulation",
            avgPop: {
                $avg: "$population"
            }
        }
    }
])

db.cities.aggregate([
    {
        $match: {
            "timezone": {
                $eq: "Europe/London"
            }
        }
    },
    {
        $sort: {
            population: -1
        }
    },
    {
        $project: {
            _id: 0,
            name: 1,
            population: 1
        }
    }
])

// Server side commands

db.runCommand({"find": "someCollection"})

// Mapreduce & finalise

// Map -> filtering, sorting
// Reduce -> operation on subset


distinctDigits = function(phone) {
    var number = phone.components.number + '',
        seen = [], 
        result = [], 
        i = number.length;

    while(i--) {
        seen[+number[i]] = 1;
    }

    for (var i = 0; i < 10; i++) {
        if (seen[i]) {
            result[result.length] = i;
        }
    }
    return result;
}
db.system.js.insertOne(
    {_id: "distinctDigits", value: distinctDigits}
)
db.system.js.find({_id: "distinctDigits"})


map = function() {
    var digits = distinctDigits(this);
    emit({
        digits: digits,
        country: this.components.country
    },
    {
        count: 1
    });
}
reduce = function(key, values) {
    var total = 0;
    for (var i = 0; i < values.length; i++) {
        total += values[i].count;
    }
    return { count: total };
}

results = db.runCommand({
    mapReduce: "phones",
    map: map,
    reduce: reduce,
    out: "phones.report"
})
